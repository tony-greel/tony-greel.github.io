{"meta":{"title":"Hexo45","subtitle":null,"description":null,"author":"John Doe","url":"https://tony-greel.github.io"},"pages":[{"title":"","date":"2018-09-30T07:35:11.663Z","updated":"2018-09-30T07:35:11.661Z","comments":true,"path":"LJJ/index.html","permalink":"https://tony-greel.github.io/LJJ/index.html","excerpt":"","text":"成绩查询 - 中国教育考试网 #Body{ margin: auto; min-width: 1200px; max-width: 1200px; text-align: center; } a{ color: #003E7D; } a:hover{ color: #FF7F00; } a:link { text-decoration: none; } 关于我们 | ENGLISH 首页 考试资讯 公示公告 考试项目 考试报名 成绩查询 证书查询 考试研究 高考问卷调查 首页>成绩查询 2018全国法律职业资格考试成绩查询 准考证号： 姓名： 证件号： 8+8验证码： document.getElementById(\"Content1\").style.height=document.documentElement.clientHeight-297+\"px\"; var a=Math.round(Math.random()*10); var b=Math.round(Math.random()*10); document.getElementById(\"ab\").innerHTML=a+\"+\"+b; function f() { var s1=document.getElementById(\"s1\").value; var s2=document.getElementById(\"s2\").value; var s3=document.getElementById(\"s3\").value; var s4=document.getElementById(\"s4\").value; if(s4==(a+b)){ if(s1==\"1\"&&s2==\"2\"&&s3==\"3\"){ window.location.replace(\"query.html\") }else{ alert(\"查询为空\"); } }else{ location.reload(); } }"},{"title":"书单","date":"2018-08-06T04:00:19.420Z","updated":"2018-07-30T18:55:52.000Z","comments":false,"path":"books/index.html","permalink":"https://tony-greel.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-08-06T04:00:19.435Z","updated":"2018-07-30T18:55:52.000Z","comments":false,"path":"categories/index.html","permalink":"https://tony-greel.github.io/categories/index.html","excerpt":"","text":""},{"title":"简介","date":"2018-08-07T03:57:36.103Z","updated":"2018-08-07T03:57:36.103Z","comments":false,"path":"about/index.html","permalink":"https://tony-greel.github.io/about/index.html","excerpt":"","text":"生活最沉重的负担不是工作,而是无聊。 姓名 : 李俊杰 性别 : 男 年龄 : 97至今 星座 : 巨蟹 血型 : B 身高 : 180 技术 : Java、Android //会一点点前端 爱好 : 听歌、看电影、打篮球、敲代码…… //本来想写打游戏,奈何很菜,就算了吧 城市 : 哪哪都想去,现就职湘潭 学历 : 大专 //正在努力自考本 专业 : 软件工程 邮箱：1123600675@qq.com 若她涉世未深，就带她看尽人间繁华。若她心已沧桑，就带她去坐旋转木马。"},{"title":"友情链接","date":"2018-08-07T11:15:47.092Z","updated":"2018-08-07T11:15:47.090Z","comments":true,"path":"links/index.html","permalink":"https://tony-greel.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-08-06T04:00:19.490Z","updated":"2018-07-30T18:55:52.000Z","comments":false,"path":"tags/index.html","permalink":"https://tony-greel.github.io/tags/index.html","excerpt":"","text":""},{"title":"项目","date":"2018-08-07T00:14:38.664Z","updated":"2018-08-07T00:14:38.663Z","comments":false,"path":"repository/index.html","permalink":"https://tony-greel.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Android随笔-动画（转场动画 & 共享元素）","slug":"Android随笔-动画(转场动画 & 共享元素)","date":"2018-08-13T01:02:25.000Z","updated":"2018-08-20T02:47:46.049Z","comments":true,"path":"2018/08/13/Android随笔-动画(转场动画 & 共享元素)/","link":"","permalink":"https://tony-greel.github.io/2018/08/13/Android随笔-动画(转场动画 & 共享元素)/","excerpt":"","text":"一.前言：","categories":[{"name":"Android随笔","slug":"Android随笔","permalink":"https://tony-greel.github.io/categories/Android随笔/"}],"tags":[]},{"title":"Android随笔-如何在子线程中更新UI","slug":"Android随笔-如何在子线程中更新UI","date":"2018-08-08T01:27:16.000Z","updated":"2018-08-08T02:58:32.372Z","comments":true,"path":"2018/08/08/Android随笔-如何在子线程中更新UI/","link":"","permalink":"https://tony-greel.github.io/2018/08/08/Android随笔-如何在子线程中更新UI/","excerpt":"","text":"一.前言：项目开发中会涉及到一些耗时操作，这个时候就会开启一个子线程，将耗时操作放到子线程中取操作，操作完毕后，往往还要同步更新ui，这个时候如果直接在子线程中更新ui，将会导致程序的闪退，同时还会看到如下报错 android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.意思是：只有创建视图层次结构的原始线程才能触及它的视图，其实说白了就是在子线程不能做更新UI的操作。 二.解决方法： 第一种方式 : runOnUiThread 第二种方式 : view.post(); 第三种方式 : Handler.post(); 第一种方式 : runOnUiThread 第二种方式 : view.post(); 第三种方式 : Handler.post(); 三.总结：以上就是我对如何在Android子线程中更新UI总结出的几个方法，如有更好的方式，欢迎加我QQ:1123600675，大家一起沟通探讨一起学习！！","categories":[{"name":"Android随笔","slug":"Android随笔","permalink":"https://tony-greel.github.io/categories/Android随笔/"}],"tags":[]},{"title":"Api总结（持续跟新）","slug":"Api","date":"2017-08-06T04:46:49.000Z","updated":"2018-08-07T09:04:28.613Z","comments":true,"path":"2017/08/06/Api/","link":"","permalink":"https://tony-greel.github.io/2017/08/06/Api/","excerpt":"","text":"这里我将一些网络上找到的Api接口总结起来，方便以后使用，这里声明：所有Api，本人皆从网络获取，并非本人抓取 每日一文：https://interface.meiriyiwen.com/article/today?dev=1wc：字数(word count)特定某天一文：https://interface.meiriyiwen.com/article/day?dev=1&amp;date= + 日期随机一文：https://interface.meiriyiwen.com/article/random?dev=1解析：&nbsp;&nbsp;&nbsp;&nbsp;date：日期&nbsp;&nbsp;&nbsp;&nbsp;curr：今日日期，yyyyMMdd 格式&nbsp;&nbsp;&nbsp;&nbsp;prev：昨日日期，yyyyMMdd 格式&nbsp;&nbsp;&nbsp;&nbsp;next：明日日期，yyyyMMdd 格式&nbsp;&nbsp;&nbsp;&nbsp;author：作者&nbsp;&nbsp;&nbsp;&nbsp;titile：标题&nbsp;&nbsp;&nbsp;&nbsp;digest：首段&nbsp;&nbsp;&nbsp;&nbsp;content：正文内容 金山翻译：http://fy.iciba.com/ajax.phpurl 示例：http://fy.iciba.com/ajax.php?a=fy&amp;f=auto&amp;t=auto&amp;w=hello%20world拼接参数：a：固定值 fyf：原文内容类型，日语取 ja，中文取 zh，英语取 en，韩语取 ko，德语取 de，西班牙语取 es，法语取 fr，自动则取 autot：译文内容类型，日语取 ja，中文取 zh，英语取 en，韩语取 ko，德语取 de，西班牙语取 es，法语取 fr，自动则取 autow：查询内容 解析：&nbsp;&nbsp;&nbsp;&nbsp;status：请求成功时则取 1&nbsp;&nbsp;&nbsp;&nbsp;content：内容信息&nbsp;&nbsp;&nbsp;&nbsp;from：原文内容类型&nbsp;&nbsp;&nbsp;&nbsp;to：译文内容类型&nbsp;&nbsp;&nbsp;&nbsp;vendor：来源平台&nbsp;&nbsp;&nbsp;&nbsp;out：译文内容&nbsp;&nbsp;&nbsp;&nbsp;err_no：请求成功时取 0 必应图片：https://www.dujin.org/sys/bing/1920.php 美女图片福利：http://gank.io/api/data/福利/10/110和1可以是其他数字，自己去试区间 一言： https://v1.hitokoto.cn/c=下面中的一个a： 动画b： 漫画c： 游戏d： 小说e： 原创f： 来自网络g： 其他其他不存在参数 任意类型随机取得 解析id：本条一言的id。hitokoto：一言正文。编码方式unicode。使用utf-8。type：类型。请参考第三节参数的表格。from：一言的出处。creator：添加者。created_at：添加时间。 历史上的今天：http://www.ipip5.com/today/api.php?type=json 美图接口api:https://pixabay.com/api/docs/官网：https://pixabay.com/zh/ 新闻API：https://fenfa.shuwen.com 更多Api:https://github.com/jokermonn/-Api","categories":[{"name":"Api","slug":"Api","permalink":"https://tony-greel.github.io/categories/Api/"}],"tags":[]},{"title":"Android随笔-侧拉框:DrawerLayout","slug":"Android侧滑布局-DrawerLayout","date":"2016-09-26T03:54:14.000Z","updated":"2018-08-07T12:22:57.954Z","comments":true,"path":"2016/09/26/Android侧滑布局-DrawerLayout/","link":"","permalink":"https://tony-greel.github.io/2016/09/26/Android侧滑布局-DrawerLayout/","excerpt":"","text":"DrawerLayout是谷歌官方推出的侧滑菜单,DrawerLayout最好为界面的根布局，否则可能会出现触摸事件被屏蔽的问题；主内容区的布局代码要放在侧滑菜单布局的前面, 因为 XML 顺序意味着按 z序（层叠顺序）排序，并且抽屉式导航栏必须位于内容顶部；侧滑菜单部分的布局必须设置layout_gravity属性，他表示侧滑菜单是在左边还是右边，而且如果不设置在的时候会报错，设置了layout_gravity=”start/left”的视图才会被认为是侧滑菜单,同时侧滑的布局必须放在最下面，不然无法响应侧滑控件的的事件，只会点击之后就关闭侧滑drawerLayout左侧菜单（或者右侧）的展开与隐藏可以被DrawerLayout.DrawerListener的实现监听我们还可以通过按钮显示侧边栏侧滑的布局可以写在fragment,这里name属性就是用来对应的Fragment的经过这几步我们就吧侧滑菜单写出来了在这里 drawer_layout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED,Gravity.END); 锁定右面的侧滑菜单，不能通过手势关闭或者打开，只能通过代码打开！如果DrawerLayout侧滑菜单中的控件点击事件能穿透到底部,那么可以在菜单的布局文件中设置clickable=&quot;true&quot;如果想实现QQ那种底部布局跟则动的效果就在addDrawerListener事件中的onDrawerSlide()添加下面的代码,就能跟随移动了 //mDrawerLayout为你的DrawerLayout View content = mDrawerLayout.getChildAt(0); int offset = (int) (drawerView.getWidth() * slideOffset); content.setTranslationX(offset);","categories":[{"name":"Android随笔","slug":"Android随笔","permalink":"https://tony-greel.github.io/categories/Android随笔/"}],"tags":[]},{"title":"Android随笔-Service","slug":"Android四大组件之Service","date":"2016-09-19T02:58:12.000Z","updated":"2018-08-07T09:03:41.374Z","comments":true,"path":"2016/09/19/Android四大组件之Service/","link":"","permalink":"https://tony-greel.github.io/2016/09/19/Android四大组件之Service/","excerpt":"","text":"1.Service作用： 提供需要长期在后台长期运行的服务（如复杂计算、下载等），主要是因为它没有长的生命周期、没有用户界面、在后台运行。 2.Service分类： 本地：运行在主线程，主线程终止后服务也会终止。但是能够节约资源，并且通信方便，由于在同一进程不需要IPC和AIDL，主要使用在需要依附某个进程的服务，音乐播放等。远程：运行在独立进程，常驻在后台，不受其他Activity影响但是非常消耗资源，通讯需要比较复杂，主要使用在系统级别的服务。前台：通知栏可以显示出来，用户可以看到，主要使用在需要让用户只要并进行相关操作，如音乐播放。后台：主要是用户无法看到，主要使用在不需要让用户知道的一些操作，跟新数据，同步数据等 3.生命周期 · 如果Service是第一次启动先会执行 onCreate(),onStartCommand()· 当次启动Service调用，将只执行onStartCommand()，因为此时Service已经创建了，无需执行onCreate()回调。无论多少次的启动Service，只需要一次stopService()即可将此Service终止，执行onDestroy()函数。· onStartCommand(..)可以多次被调用，onDestroy()与onCreate()相匹配，当用户强制kill掉进程时，onDestroy()是不会执行的。· startService(Intent serviceIntent)，其中的intent既可以是显式Intent，也可以是隐式Intent，当Client与Service同处于一个App时，一般推荐使用显示Intent。当处于不同App时，只能使用隐式Intent。· 当Service需要运行在单独的进程中，AndroidManifest.xml声明时需要通过android:process指明此进程名称，当此Service需要对其他App开放时，android:exported属性值需要设置为true. 4.通讯 简单通信直接通过Intent进行传值，我们在启动一个Service的时候通过Intent的对象向Service进行传值，这种方式传递值比较不方便，性能不是很高。传值：获取值： 2．绑定服务传输数据 在Service中编写Binder的内部类，自定义方法进行数据传输。活动类：服务类： 通过使用Messenger方式（可以在不同进程间通讯）服务端：客户端 5.服务单独运行在进程 在XML文件中给Service添加process属性，有两种赋值方式，一种是[:xxxxx],一种是[com.pw.xxx.xxx] 第一种赋值是一种简写，完整的写法是[com.xxx.xxx:xxxx]这样的进程是应用的私有进程，其他应用不会跟它跑到同一个地方去。而第二种就是一种全局进程，其他的应用程序可以通过ShareUID跑进去。多进程的使用地方，可以使用在一些需要保活的地方，音乐后台播放，在退出activity后还能继续播放、加载大图、推送服务，能够在程序退出后继续的向用户推送东西。将功能独立的分开来，减少程序崩溃","categories":[{"name":"Android随笔","slug":"Android随笔","permalink":"https://tony-greel.github.io/categories/Android随笔/"}],"tags":[]},{"title":"Hexo常用命令","slug":"hexo常用命令","date":"2016-09-04T08:25:04.000Z","updated":"2018-08-06T08:10:13.411Z","comments":true,"path":"2016/09/04/hexo常用命令/","link":"","permalink":"https://tony-greel.github.io/2016/09/04/hexo常用命令/","excerpt":"","text":"1.新建一个网站，如果没有指定路径的文件夹，那么将会在默认路径下面建立网站，在建立的时候可以看到地址,[folder]可以随意命名，如：blog $ hexo init [folder] 2.创建一篇文章，[layout]为博客文章布局，可以设置为下面三种布局之一 title 随意取名，会作为你的文章的文件的名字，同时也会作为文章标题，可以在里面修改，不一定要一致 · post&nbsp;&nbsp;我一般都用post，默认就是这个 · page · draft $ hexo new [layout] 文章建立之后，在你的网站文件夹中 \\source\\_posts 路径下面可以找到创建的文章文件，是 markdown 格式的，文件后缀名为 .md, Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量,以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 · layout 布局 · title 标题 · date 建立日期 · updated 更新日期 · comments 开启文章的评论功能 · tags 标签 · categories 分类 · permalink 覆盖文章网址3. 将更改上传到github,每次更新完博客输入这条命令，就能将文章跟新到博客了 $ hexo g -d 4.启动本地服务,可以在写完文章后查看效果 $ hexo s 5.有时候博客写完，上传giehub无效果，那么试试清除缓存 $ hexo clean 基本的hexo编写博客的使用就到这里了，使用上面几条命令就能够创建编写上传你的文章到博客去。其他的一些操作可以去hexo官网查看官方文档HEXO官方文档","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://tony-greel.github.io/categories/Hexo/"}],"tags":[]},{"title":"Android随笔-Fragment","slug":"Android随笔-Fragment","date":"2016-07-07T08:09:07.000Z","updated":"2018-08-07T12:46:18.083Z","comments":true,"path":"2016/07/07/Android随笔-Fragment/","link":"","permalink":"https://tony-greel.github.io/2016/07/07/Android随笔-Fragment/","excerpt":"","text":"一.Fragment简介：Android在3.0中引入了Fragments的概念，主要目的是用在大屏幕设备上–例如平板电脑上，支持更加动态和灵活的UI设计。平板电脑的屏幕要比手机的大得多，有更多的空间来放更多的UI组件,并且这些组件之间会产生更多的交互。Fragment允许这样的一种设计，而不需要你亲自来管理View Hierarchy的复杂变化。通过将Activity的布局分散到Fragment中，你可以在运行时修改Activity的外观，并在由Activity管理的Back Stack中保存那些变化。 其实这只是比较官方一点的说法,其实通俗易懂点说就是,一个可以将activity拆分成几个完全独立封装的可重用的组件，每个组件有自己的生命周期和ui布局。它可以表示Activity中的行为或用户界面部分。我们可以在一个Activity中用多个Fragment组合来构建多窗格的UI，以及在多个Activity中重复使用某个Fragment。它有自己的生命周期，能接受自己的输入，并且可以在 Activity 运行时添加或删除Fragment（有点像在不同 Activity 中重复使用的“子 Activity”）。 二.Fragment生命周期： onAttach() : Fragment和Activity建立关联的时候调用，被附加到Activity中去。 onCreate() : 系统会在创建Fragment时调用此方法。可以初始化一段资源文件等等。 onCreateView() : 系统会在Fragment首次绘制其用户界面时调用此方法。要想为Fragment绘制UI，从该方法中返回的View必须是Fragment布局的根视图。如果Fragment未提供UI，您可以返回null。 onViewCreated() : 在Fragment被绘制后，调用此方法，可以初始化控件资源。 onActivityCreated() : 当onCreate onCreateView()，onViewCreated()方法执行完后调用，也就是Activity被渲染绘制出来后。 onStart() : 当系统调用该方法的时候，fragment已经显示在ui上，但还不能进行互动，因为onResume方法还没执行完。 onResume() : 该方法为fragment从创建到显示Android系统调用的最后一个生命周期方法，调用完该方法时候，fragment就可以与用户互动了。 onPause() : 系统将此方法作为用户离开Fragment的第一个信号（但并不总是意味着此Fragment会被销毁）进行调用。 通常可以在此方法内确认在当前用户会话结束后仍然有效的任何更改（因为用户可能不会返回）。 onStop() : 当onStop返回的时候，fragment将从屏幕上消失。 onDestoryView() : 该方法的调用意味着在 onCreateView 中创建的视图都将被移除。 onDestroy() : Android在Fragment不再使用时会调用该方法，要注意的是这时Fragment还和Activity相关联的！并且可以获得Fragment对象，但无法对获得的Fragment进行任何操作。 onDetach() : 为Fragment生命周期中的最后一个方法，当该方法执行完后，Fragment与Activity不再有关联。 顺序如图下： 三.Fragment与Activity关系：总的来说，Fragment和Activity的生命周期类似。需要注意的是，它相比于Activity，多了onAttach(), onCreateView(), onActivityCreate)和onDestoryView()、onDetach()这几个回调函数；但是，却少了onRestart()。 onAttach(Activity) : 当Fragment和Activity发生关联时使用 onCreateView(LayoutInflater, ViewGroup, Bundle) : 创建该Fragment的视图 onActivityCreate(Bundle) : 当Activity的onCreate方法返回时调用 onDestoryView() : 与onCreateView相对应，当该Fragment的视图被移除时调用 onDetach() : 与onAttach相对应，当Fragment与Activity关联被取消时调用 关系图如下：注意：除了onCreateView，其他的所有方法如果你重写了，必须调用父类对于该方法的实现。 四.总结：在用法的代码部分参考郭神的博客，感觉郭神在代码讲解部分通俗易懂，看起来也方便。总之，在使用Fragment也有一些注意事项，不是那么完美的，虽然谷歌推荐我们用Fragment来代替Activity来使用，我们也确实这做了，现在基本主流的APP也都是少量Activity+很多Fragment，但也需要避免有些坑慎入。","categories":[{"name":"Android随笔","slug":"Android随笔","permalink":"https://tony-greel.github.io/categories/Android随笔/"}],"tags":[]}]}