<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo45</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tony-greel.github.io/"/>
  <updated>2018-08-07T09:04:28.613Z</updated>
  <id>https://tony-greel.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Api总结（持续跟新）</title>
    <link href="https://tony-greel.github.io/2017/08/06/Api/"/>
    <id>https://tony-greel.github.io/2017/08/06/Api/</id>
    <published>2017-08-06T04:46:49.000Z</published>
    <updated>2018-08-07T09:04:28.613Z</updated>
    
    <content type="html"><![CDATA[<p>这里我将一些网络上找到的Api接口总结起来，方便以后使用，这里声明：所有Api，本人皆从网络获取，并非本人抓取</p><hr><p>每日一文：<a href="https://interface.meiriyiwen.com/article/today?dev=1" target="_blank" rel="noopener">https://interface.meiriyiwen.com/article/today?dev=1</a><br>wc：字数(word count)<br>特定某天一文：<a href="https://interface.meiriyiwen.com/article/day?dev=1&amp;date=" target="_blank" rel="noopener">https://interface.meiriyiwen.com/article/day?dev=1&amp;date=</a> + 日期<br>随机一文：<a href="https://interface.meiriyiwen.com/article/random?dev=1" target="_blank" rel="noopener">https://interface.meiriyiwen.com/article/random?dev=1</a><br>解析：<br>&nbsp;&nbsp;&nbsp;&nbsp;date：日期<br>&nbsp;&nbsp;&nbsp;&nbsp;curr：今日日期，yyyyMMdd 格式<br>&nbsp;&nbsp;&nbsp;&nbsp;prev：昨日日期，yyyyMMdd 格式<br>&nbsp;&nbsp;&nbsp;&nbsp;next：明日日期，yyyyMMdd 格式<br>&nbsp;&nbsp;&nbsp;&nbsp;author：作者<br>&nbsp;&nbsp;&nbsp;&nbsp;titile：标题<br>&nbsp;&nbsp;&nbsp;&nbsp;digest：首段<br>&nbsp;&nbsp;&nbsp;&nbsp;content：正文内容</p><hr><p>金山翻译：<a href="http://fy.iciba.com/ajax.php" target="_blank" rel="noopener">http://fy.iciba.com/ajax.php</a><br>url 示例：<a href="http://fy.iciba.com/ajax.php?a=fy&amp;f=auto&amp;t=auto&amp;w=hello%20world" target="_blank" rel="noopener">http://fy.iciba.com/ajax.php?a=fy&amp;f=auto&amp;t=auto&amp;w=hello%20world</a><br>拼接参数：<br>a：固定值 fy<br>f：原文内容类型，日语取 ja，中文取 zh，英语取 en，韩语取 ko，德语取 de，西班牙语取 es，法语取 fr，自动则取 auto<br>t：译文内容类型，日语取 ja，中文取 zh，英语取 en，韩语取 ko，德语取 de，西班牙语取 es，法语取 fr，自动则取 auto<br>w：查询内容</p><p>解析：<br>&nbsp;&nbsp;&nbsp;&nbsp;status：请求成功时则取 1<br>&nbsp;&nbsp;&nbsp;&nbsp;content：内容信息<br>&nbsp;&nbsp;&nbsp;&nbsp;from：原文内容类型<br>&nbsp;&nbsp;&nbsp;&nbsp;to：译文内容类型<br>&nbsp;&nbsp;&nbsp;&nbsp;vendor：来源平台<br>&nbsp;&nbsp;&nbsp;&nbsp;out：译文内容<br>&nbsp;&nbsp;&nbsp;&nbsp;err_no：请求成功时取 0</p><hr><p>必应图片：<a href="https://www.dujin.org/sys/bing/1920.php" target="_blank" rel="noopener">https://www.dujin.org/sys/bing/1920.php</a></p><hr><p>美女图片福利：<a href="http://gank.io/api/data/福利/10/1" target="_blank" rel="noopener">http://gank.io/api/data/福利/10/1</a><br>10和1可以是其他数字，自己去试区间</p><hr><p>一言： <a href="https://v1.hitokoto.cn/c=下面中的一个" target="_blank" rel="noopener">https://v1.hitokoto.cn/c=下面中的一个</a><br>a： 动画<br>b： 漫画<br>c： 游戏<br>d： 小说<br>e： 原创<br>f： 来自网络<br>g： 其他<br>其他不存在参数    任意类型随机取得</p><p>解析<br>id：本条一言的id。<br>hitokoto：一言正文。编码方式unicode。使用utf-8。<br>type：类型。请参考第三节参数的表格。<br>from：一言的出处。<br>creator：添加者。<br>created_at：添加时间。</p><hr><p>历史上的今天：<a href="http://www.ipip5.com/today/api.php?type=json" target="_blank" rel="noopener">http://www.ipip5.com/today/api.php?type=json</a></p><hr><p>美图接口api:<a href="https://pixabay.com/api/docs/" target="_blank" rel="noopener">https://pixabay.com/api/docs/</a><br>官网：<a href="https://pixabay.com/zh/" target="_blank" rel="noopener">https://pixabay.com/zh/</a> </p><hr><p>新闻API：<a href="https://fenfa.shuwen.com" target="_blank" rel="noopener">https://fenfa.shuwen.com</a></p><hr><p>更多Api:<a href="https://github.com/jokermonn/-Api" target="_blank" rel="noopener">https://github.com/jokermonn/-Api</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里我将一些网络上找到的Api接口总结起来，方便以后使用，这里声明：所有Api，本人皆从网络获取，并非本人抓取&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;每日一文：&lt;a href=&quot;https://interface.meiriyiwen.com/article/today?dev=1&quot; t
      
    
    </summary>
    
      <category term="Api" scheme="https://tony-greel.github.io/categories/Api/"/>
    
    
  </entry>
  
  <entry>
    <title>Android随笔-侧拉框:DrawerLayout</title>
    <link href="https://tony-greel.github.io/2016/09/26/Android%E4%BE%A7%E6%BB%91%E5%B8%83%E5%B1%80-DrawerLayout/"/>
    <id>https://tony-greel.github.io/2016/09/26/Android侧滑布局-DrawerLayout/</id>
    <published>2016-09-26T03:54:14.000Z</published>
    <updated>2018-08-07T12:22:57.954Z</updated>
    
    <content type="html"><![CDATA[<p>DrawerLayout是谷歌官方推出的侧滑菜单,DrawerLayout最好为界面的根布局，否则可能会出现触摸事件被屏蔽的问题；主内容区的布局代码要放在侧滑菜单布局的前面, 因为 XML 顺序意味着按 z序（层叠顺序）排序，并且抽屉式导航栏必须位于内容顶部；侧滑菜单部分的布局必须设置<strong>layout_gravity</strong>属性，他表示侧滑菜单是在左边还是右边，而且如果不设置在的时候会报错，设置了<strong>layout_gravity=”start/left”</strong>的视图才会被认为是侧滑菜单,<strong>同时侧滑的布局必须放在最下面</strong>，不然无法响应侧滑控件的的事件，只会点击之后就关闭侧滑<br><br><center><img src="/2016/09/26/Android侧滑布局-DrawerLayout/1.png"></center><br><br>drawerLayout左侧菜单（或者右侧）的展开与隐藏可以被DrawerLayout.DrawerListener的实现监听<br><br><center><img src="/2016/09/26/Android侧滑布局-DrawerLayout/2.png"></center><br><br>我们还可以通过按钮显示侧边栏<br><br><center><img src="/2016/09/26/Android侧滑布局-DrawerLayout/3.png"></center><br><br>侧滑的布局可以写在fragment,这里<strong>name</strong>属性就是用来对应的Fragment的<br><br><center><img src="/2016/09/26/Android侧滑布局-DrawerLayout/4.png"></center><br><br><br><center><img src="/2016/09/26/Android侧滑布局-DrawerLayout/5.png"></center><br><br>经过这几步我们就吧侧滑菜单写出来了<br>在这里 <code>drawer_layout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED,Gravity.END);</code> 锁定右面的侧滑菜单，不能通过手势关闭或者打开，只能通过代码打开！<br>如果DrawerLayout侧滑菜单中的控件点击事件能穿透到底部,那么可以在菜单的布局文件中设置<code>clickable=&quot;true&quot;</code>如果想实现QQ那种底部布局跟则动的效果就在addDrawerListener事件中的onDrawerSlide()添加下面的代码,就能跟随移动了</p><pre><code>//mDrawerLayout为你的DrawerLayoutView content = mDrawerLayout.getChildAt(0);int offset = (int) (drawerView.getWidth() * slideOffset);content.setTranslationX(offset);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DrawerLayout是谷歌官方推出的侧滑菜单,DrawerLayout最好为界面的根布局，否则可能会出现触摸事件被屏蔽的问题；主内容区的布局代码要放在侧滑菜单布局的前面, 因为 XML 顺序意味着按 z序（层叠顺序）排序，并且抽屉式导航栏必须位于内容顶部；侧滑菜单部分的
      
    
    </summary>
    
      <category term="Android随笔" scheme="https://tony-greel.github.io/categories/Android%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Android随笔-Service</title>
    <link href="https://tony-greel.github.io/2016/09/19/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BService/"/>
    <id>https://tony-greel.github.io/2016/09/19/Android四大组件之Service/</id>
    <published>2016-09-19T02:58:12.000Z</published>
    <updated>2018-08-07T09:03:41.374Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="1-Service作用："><a href="#1-Service作用：" class="headerlink" title="1.Service作用："></a>1.Service作用：</h4></blockquote><p>提供需要长期在后台长期运行的服务（如复杂计算、下载等），主要是因为它没有长的生命周期、没有用户界面、在后台运行。</p><blockquote><h4 id="2-Service分类："><a href="#2-Service分类：" class="headerlink" title="2.Service分类："></a>2.Service分类：</h4></blockquote><p><strong>本地</strong>：运行在主线程，主线程终止后服务也会终止。但是能够节约资源，并且通信方便，由于在同一进程不需要IPC和AIDL，主要使用在需要依附某个进程的服务，音乐播放等。<br><strong>远程</strong>：运行在独立进程，常驻在后台，不受其他Activity影响但是非常消耗资源，通讯需要比较复杂，主要使用在系统级别的服务。<br><strong>前台</strong>：通知栏可以显示出来，用户可以看到，主要使用在需要让用户只要并进行相关操作，如音乐播放。<br><strong>后台</strong>：主要是用户无法看到，主要使用在不需要让用户知道的一些操作，跟新数据，同步数据等</p><blockquote><h4 id="3-生命周期"><a href="#3-生命周期" class="headerlink" title="3.生命周期"></a>3.生命周期</h4></blockquote><p><strong>·</strong> 如果Service是第一次启动先会执行 <strong>onCreate(),onStartCommand()</strong><br><strong>·</strong> 当次启动Service调用，将只执行<strong>onStartCommand()</strong>，因为此时Service已经创建了，无需执行<strong>onCreate()</strong>回调。无论多少次的启动Service，只需要一次<strong>stopService()</strong>即可将此Service终止，执行<strong>onDestroy()</strong>函数。<br><strong>· onStartCommand(..)</strong>可以多次被调用，<strong>onDestroy()与onCreate()</strong>相匹配，当用户强制kill掉进程时，<strong>onDestroy()</strong>是不会执行的。<br><strong>· startService(Intent serviceIntent)</strong>，其中的intent既可以是显式Intent，也可以是隐式Intent，当Client与Service同处于一个App时，一般推荐使用显示Intent。当处于不同App时，只能使用隐式Intent。<br><strong>·</strong> 当Service需要运行在单独的进程中，<strong>AndroidManifest.xml</strong>声明时需要通过<strong>android:process</strong>指明此进程名称，当此Service需要对其他App开放时，<strong>android:exported</strong>属性值需要设置为true.</p><blockquote><h4 id="4-通讯"><a href="#4-通讯" class="headerlink" title="4.通讯"></a>4.通讯</h4></blockquote><ol><li>简单通信<br>直接通过Intent进行传值，我们在启动一个Service的时候通过Intent的对象向Service进行传值，这种方式传递值比较不方便，性能不是很高。<br>传值：<br><br><center><img src="/2016/09/19/Android四大组件之Service/1.png"></center><br><br>获取值：<br><br><center><img src="/2016/09/19/Android四大组件之Service/2.png"></center><br></li></ol><p>2．绑定服务传输数据<br>    在Service中编写Binder的内部类，自定义方法进行数据传输。<br>活动类：<br><br><center><img src="/2016/09/19/Android四大组件之Service/3.png"></center><br><br>服务类：<br><br><center><img src="/2016/09/19/Android四大组件之Service/4.png"></center><br></p><ol start="3"><li>通过使用Messenger方式（可以在不同进程间通讯）<br>服务端：<br><br><center><img src="/2016/09/19/Android四大组件之Service/5.png"></center><br><br>客户端<br><br><center><img src="/2016/09/19/Android四大组件之Service/6.png"></center><br></li></ol><blockquote><h4 id="5-服务单独运行在进程"><a href="#5-服务单独运行在进程" class="headerlink" title="5.服务单独运行在进程"></a>5.服务单独运行在进程</h4></blockquote><p>在XML文件中给Service添加process属性，有两种赋值方式，一种是[:xxxxx],一种是[com.pw.xxx.xxx]  第一种赋值是一种简写，完整的写法是[com.xxx.xxx:xxxx]这样的进程是应用的私有进程，其他应用不会跟它跑到同一个地方去。而第二种就是一种全局进程，其他的应用程序可以通过ShareUID跑进去。<br>多进程的使用地方，可以使用在一些需要保活的地方，音乐后台播放，在退出activity后还能继续播放、加载大图、推送服务，能够在程序退出后继续的向用户推送东西。将功能独立的分开来，减少程序崩溃</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;1-Service作用：&quot;&gt;&lt;a href=&quot;#1-Service作用：&quot; class=&quot;headerlink&quot; title=&quot;1.Service作用：&quot;&gt;&lt;/a&gt;1.Service作用：&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;提供需
      
    
    </summary>
    
      <category term="Android随笔" scheme="https://tony-greel.github.io/categories/Android%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="https://tony-greel.github.io/2016/09/04/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://tony-greel.github.io/2016/09/04/hexo常用命令/</id>
    <published>2016-09-04T08:25:04.000Z</published>
    <updated>2018-08-06T08:10:13.411Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-新建一个网站，如果没有指定路径的文件夹，那么将会在默认路径下面建立网站，在建立的时候可以看到地址-folder-可以随意命名，如：blog"><a href="#1-新建一个网站，如果没有指定路径的文件夹，那么将会在默认路径下面建立网站，在建立的时候可以看到地址-folder-可以随意命名，如：blog" class="headerlink" title="1.新建一个网站，如果没有指定路径的文件夹，那么将会在默认路径下面建立网站，在建立的时候可以看到地址,[folder]可以随意命名，如：blog"></a>1.新建一个网站，如果没有指定路径的文件夹，那么将会在默认路径下面建立网站，在建立的时候可以看到地址,[folder]可以随意命名，如：blog</h4><blockquote><p>$ hexo init [folder]   </p></blockquote><p><br><br></p><h4 id="2-创建一篇文章，-layout-为博客文章布局，可以设置为下面三种布局之一-title-随意取名，会作为你的文章的文件的名字，同时也会作为文章标题，可以在里面修改，不一定要一致"><a href="#2-创建一篇文章，-layout-为博客文章布局，可以设置为下面三种布局之一-title-随意取名，会作为你的文章的文件的名字，同时也会作为文章标题，可以在里面修改，不一定要一致" class="headerlink" title="2.创建一篇文章，[layout]为博客文章布局，可以设置为下面三种布局之一 title 随意取名，会作为你的文章的文件的名字，同时也会作为文章标题，可以在里面修改，不一定要一致"></a>2.创建一篇文章，[layout]为博客文章布局，可以设置为下面三种布局之一 title 随意取名，会作为你的文章的文件的名字，同时也会作为文章标题，可以在里面修改，不一定要一致</h4><ul><li><h5 id="·-post-nbsp-nbsp-我一般都用post，默认就是这个"><a href="#·-post-nbsp-nbsp-我一般都用post，默认就是这个" class="headerlink" title="· post&nbsp;&nbsp;我一般都用post，默认就是这个"></a>· post&nbsp;&nbsp;我一般都用post，默认就是这个</h5></li><li><h5 id="·-page"><a href="#·-page" class="headerlink" title="· page"></a>· page</h5></li><li><h5 id="·-draft"><a href="#·-draft" class="headerlink" title="· draft"></a>· draft</h5></li></ul><blockquote><p>$ hexo new [layout] <title></title></p></blockquote><hr><p>文章建立之后，在你的网站文件夹中<span style="color:#ff0000"> <strong>\source\_posts</strong> </span> 路径下面可以找到创建的文章文件，是 <strong>markdown</strong> 格式的，文件后缀名为 <strong>.md</strong>, <strong>Front-matter</strong> 是文件最上方以 — 分隔的区域，用于指定个别文件的变量,以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><ul><li><strong>·</strong> layout 布局</li><li><strong>·</strong> title 标题</li><li><strong>·</strong> date 建立日期</li><li><strong>·</strong> updated 更新日期</li><li><strong>·</strong> comments 开启文章的评论功能</li><li><strong>·</strong> tags 标签</li><li><strong>·</strong> categories 分类</li><li><strong>·</strong> permalink 覆盖文章网址<br><br><br><h4 id="3-将更改上传到github-每次更新完博客输入这条命令，就能将文章跟新到博客了"><a href="#3-将更改上传到github-每次更新完博客输入这条命令，就能将文章跟新到博客了" class="headerlink" title="3. 将更改上传到github,每次更新完博客输入这条命令，就能将文章跟新到博客了"></a>3. 将更改上传到github,每次更新完博客输入这条命令，就能将文章跟新到博客了</h4><blockquote><p>$ hexo g -d</p></blockquote></li></ul><p><br><br></p><h4 id="4-启动本地服务-可以在写完文章后查看效果"><a href="#4-启动本地服务-可以在写完文章后查看效果" class="headerlink" title="4.启动本地服务,可以在写完文章后查看效果"></a>4.启动本地服务,可以在写完文章后查看效果</h4><blockquote><p>$ hexo s</p></blockquote><p><br><br></p><h4 id="5-有时候博客写完，上传giehub无效果，那么试试清除缓存"><a href="#5-有时候博客写完，上传giehub无效果，那么试试清除缓存" class="headerlink" title="5.有时候博客写完，上传giehub无效果，那么试试清除缓存"></a>5.有时候博客写完，上传giehub无效果，那么试试清除缓存</h4><blockquote><p>$ hexo clean</p></blockquote><p><br><br><br>基本的hexo编写博客的使用就到这里了，使用上面几条命令就能够创建编写上传你的文章到博客去。其他的一些操作可以去hexo官网查看官方文档<br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">HEXO官方文档</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-新建一个网站，如果没有指定路径的文件夹，那么将会在默认路径下面建立网站，在建立的时候可以看到地址-folder-可以随意命名，如：blog&quot;&gt;&lt;a href=&quot;#1-新建一个网站，如果没有指定路径的文件夹，那么将会在默认路径下面建立网站，在建立的时候可以看到地
      
    
    </summary>
    
      <category term="Hexo" scheme="https://tony-greel.github.io/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Android随笔-Fragment</title>
    <link href="https://tony-greel.github.io/2016/07/07/Android%E9%9A%8F%E7%AC%94-Fragment/"/>
    <id>https://tony-greel.github.io/2016/07/07/Android随笔-Fragment/</id>
    <published>2016-07-07T08:09:07.000Z</published>
    <updated>2018-08-07T12:46:18.083Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="一-Fragment简介："><a href="#一-Fragment简介：" class="headerlink" title="一.Fragment简介："></a>一.Fragment简介：</h4><p>Android在3.0中引入了Fragments的概念，主要目的是用在大屏幕设备上–例如平板电脑上，支持更加动态和灵活的UI设计。平板电脑的屏幕要比手机的大得多，有更多的空间来放更多的UI组件,并且这些组件之间会产生更多的交互。Fragment允许这样的一种设计，而不需要你亲自来管理View Hierarchy的复杂变化。通过将Activity的布局分散到Fragment中，你可以在运行时修改Activity的外观，并在由Activity管理的Back Stack中保存那些变化。</p></blockquote><p><strong>其实这只是比较官方一点的说法,其实通俗易懂点说就是,一个可以将activity拆分成几个完全独立封装的可重用的组件，每个组件有自己的生命周期和ui布局。它可以表示Activity中的行为或用户界面部分。我们可以在一个Activity中用多个Fragment组合来构建多窗格的UI，以及在多个Activity中重复使用某个Fragment。它有自己的生命周期，能接受自己的输入，并且可以在 Activity 运行时添加或删除Fragment（有点像在不同 Activity 中重复使用的“子 Activity”）。</strong></p><blockquote><h4 id="二-Fragment生命周期："><a href="#二-Fragment生命周期：" class="headerlink" title="二.Fragment生命周期："></a>二.Fragment生命周期：</h4><ul><li>onAttach() : Fragment和Activity建立关联的时候调用，被附加到Activity中去。</li><li>onCreate() : 系统会在创建Fragment时调用此方法。可以初始化一段资源文件等等。</li><li>onCreateView() : 系统会在Fragment首次绘制其用户界面时调用此方法。要想为Fragment绘制UI，从该方法中返回的View必须是Fragment布局的根视图。如果Fragment未提供UI，您可以返回null。</li><li>onViewCreated() : 在Fragment被绘制后，调用此方法，可以初始化控件资源。</li><li>onActivityCreated() : 当onCreate onCreateView()，onViewCreated()方法执行完后调用，也就是Activity被渲染绘制出来后。</li><li>onStart() : 当系统调用该方法的时候，fragment已经显示在ui上，但还不能进行互动，因为onResume方法还没执行完。</li><li>onResume() : 该方法为fragment从创建到显示Android系统调用的最后一个生命周期方法，调用完该方法时候，fragment就可以与用户互动了。</li><li>onPause() : 系统将此方法作为用户离开Fragment的第一个信号（但并不总是意味着此Fragment会被销毁）进行调用。 通常可以在此方法内确认在当前用户会话结束后仍然有效的任何更改（因为用户可能不会返回）。</li><li>onStop() : 当onStop返回的时候，fragment将从屏幕上消失。</li><li>onDestoryView() : 该方法的调用意味着在 onCreateView 中创建的视图都将被移除。</li><li>onDestroy() : Android在Fragment不再使用时会调用该方法，要注意的是这时Fragment还和Activity相关联的！并且可以获得Fragment对象，但无法对获得的Fragment进行任何操作。</li><li>onDetach() : 为Fragment生命周期中的最后一个方法，当该方法执行完后，Fragment与Activity不再有关联。</li></ul></blockquote><p>顺序如图下：<br><br><center><img src="/2016/07/07/Android随笔-Fragment/cycle.png"></center><br></p><blockquote><h4 id="三-Fragment与Activity关系："><a href="#三-Fragment与Activity关系：" class="headerlink" title="三.Fragment与Activity关系："></a>三.Fragment与Activity关系：</h4><p>总的来说，Fragment和Activity的生命周期类似。需要注意的是，它相比于Activity，多了onAttach(), onCreateView(), onActivityCreate)和onDestoryView()、onDetach()这几个回调函数；但是，却少了onRestart()。</p><ul><li>onAttach(Activity) : 当Fragment和Activity发生关联时使用</li><li>onCreateView(LayoutInflater, ViewGroup, Bundle) : 创建该Fragment的视图</li><li>onActivityCreate(Bundle) : 当Activity的onCreate方法返回时调用</li><li>onDestoryView() : 与onCreateView相对应，当该Fragment的视图被移除时调用</li><li>onDetach() : 与onAttach相对应，当Fragment与Activity关联被取消时调用</li></ul></blockquote><p>关系图如下：<br><br><center><img src="/2016/07/07/Android随笔-Fragment/comparison.png"></center><br><br><strong>注意：除了onCreateView，其他的所有方法如果你重写了，必须调用父类对于该方法的实现。</strong></p><blockquote><h4 id="四-总结："><a href="#四-总结：" class="headerlink" title="四.总结："></a>四.总结：</h4><p><strong>在用法的代码部分参考郭神的博客，感觉郭神在代码讲解部分通俗易懂，看起来也方便。总之，在使用Fragment也有一些注意事项，不是那么完美的，虽然谷歌推荐我们用Fragment来代替Activity来使用，我们也确实这做了，现在基本主流的APP也都是少量Activity+很多Fragment，但也需要避免有些坑慎入。</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;一-Fragment简介：&quot;&gt;&lt;a href=&quot;#一-Fragment简介：&quot; class=&quot;headerlink&quot; title=&quot;一.Fragment简介：&quot;&gt;&lt;/a&gt;一.Fragment简介：&lt;/h4&gt;&lt;p&gt;Android在3.0中引
      
    
    </summary>
    
      <category term="Android随笔" scheme="https://tony-greel.github.io/categories/Android%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
